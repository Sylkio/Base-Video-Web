@page
@model VideoWebapp.Pages.RecordModel
@{
}

<head>
    <script src="~/js/replaceVideoStream.js"></script>
    @*<script src="https://cdn.jsdelivr.net/gh/meething/StreamSwitcher@latest/js/ReplaceableMediaStream.js"></script>*@
    @*https://github.com/meething/StreamSwitcher länk till streamswitcher jag baserade min kod på*@

</head>

<a href="/Index">GO BACK</a>
<br />

<div>
    <h3 id="error" style="color: red;"></h3>

    <div style="padding: 20px;">
        <video id="remoteVideo" autoplay muted controls style="width:500px;"></video>
        <br />
        <button id="toggleButton">Toggle Video/Screen</button>
        <button id="recordButton">Start Recording</button>*

    </div>

    <br />

    <div id="previewContainer" style="display: none; padding: 20px;">
        <video id="previewVideo" controls style="width:500px;"></video>
        <br />
        <button id="downloadButton">Download Recording</button>
    </div>
</div>






<script>
    if (!supported()) {
        console.error("Browser does not support this functionality!")
        document.getElementById("error").innerHTML = 'Browser not supported <a href="https://caniuse.com/#search=captureStream">Info</a>';
    }

    var remoteVideo = document.getElementById('remoteVideo');

    var toggleButton = document.getElementById('toggleButton');
    var recordButton = document.getElementById('recordButton');
    var previewContainer = document.getElementById('previewContainer');
    var previewVideo = document.getElementById('previewVideo');
    var downloadButton = document.getElementById('downloadButton');

    var mediaRecorder;
    var isRecording = false;
    var currentMediaType = 'camera';
    var chunks = [];

    var tempStream = new MediaStream();
    setTimeout(function () {
        remoteVideo.srcObject = tempStream.remoteStream;
    }, 500);

    async function startMedia(type) {
        try {
            if (type === 'camera') {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
                stream.replaceVideoTrack(stream.getVideoTracks()[0])
                stream.replaceAudioTrack(stream.getAudioTracks()[0])

                currentMediaType = 'camera';


            } else if (type === 'screen') {
                const stream = await navigator.mediaDevices.getDisplayMedia({ audio: true, video: true });
                stream.replaceVideoTrack(stream.getVideoTracks()[0])

                currentMediaType = 'screen';
            }
        } catch (error) {
            console.error('Error accessing media devices:', error);
        }
    }

    startMedia('camera');

    toggleButton.addEventListener('click', function () {
        if (currentMediaType === 'camera') {
            startMedia('screen');
            console.log("Switching to screen");
        } else {
            startMedia('camera');
            console.log("Switching to camera");
        }
    });

    function startRecording() {
        mediaRecorder = new MediaRecorder(remoteVideo.captureStream());

        mediaRecorder.ondataavailable = function (event) {
            if (event.data.size > 0) {
                chunks.push(event.data);
            }
        };

        mediaRecorder.onstop = function () {
            var blob = new Blob(chunks, { type: 'video/webm' });
            var url = URL.createObjectURL(blob);

            previewVideo.src = url;
            previewContainer.style.display = 'block';
        };

        mediaRecorder.start();
        isRecording = true;
    }

    function stopRecording() {
        if (mediaRecorder && isRecording) {
            mediaRecorder.stop();
            isRecording = false;
            chunks = [];
        }
    }

    recordButton.addEventListener('click', function () {
        console.log("recording button clicked")

        if (!isRecording) {
            startRecording();
            recordButton.textContent = 'Stop Recording';
        } else {
            stopRecording();
            recordButton.textContent = 'Start Recording';
        }
    });

    downloadButton.addEventListener('click', function () {
        if (previewVideo.src) {
            var a = document.createElement('a');
            document.body.appendChild(a);
            a.style = 'display: none';
            a.href = previewVideo.src;
            a.download = 'recording_preview.webm';
            a.click();
            window.URL.revokeObjectURL(previewVideo.src);
        }
    });

</script>