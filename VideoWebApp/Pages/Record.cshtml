@page
@model VideoWebapp.Pages.RecordModel
@{
    Layout = "_Layout";
}
<html lang="en">
<head>
    @*<script src="~/js/replaceVideoStream.js"></script>*@
    @*<script src="https://cdn.jsdelivr.net/gh/meething/StreamSwitcher@latest/js/ReplaceableMediaStream.js"></script>*@
    @*https://github.com/meething/StreamSwitcher länk till streamswitcher jag baserade min kod på*@

</head>
<body>
    <script>
        function isIos() {
            return /iPhone|iPad|iPod|Macintosh|Mac OS X/i.test(navigator.userAgent);
        }

        if (isIos()) {
            window.location.href = '/RecordIOS'
        }
    </script>

    <div>
        <h3 id="error" style="color: red;"></h3>

        <div style="padding: 1em;">
            <video id="remoteVideo" autoplay muted controls style="width:100%; max-width:600px;"></video>
            <br />
            <button class="generic-btn" id="toggleButton">Toggle Video/Screen</button>
            <button class="generic-btn" id="recordButton">Start Recording</button>

        </div>

        <br />

        <div id="previewContainer" style="display: none; padding: 20px;">
            <video id="previewVideo" controls style="width:100%; max-width:600px;"></video>
            <br />
            <button class="generic-btn" id="downloadButton">Download Recording</button>
            <br />
            <br />
            <h6>Upload this to azure?</h6>
            <button class="generic-btn" id="azureUploadButton">Upload</button>
        </div>
    </div>
</body>
</html>







@*<script src="~/js/replaceVideoStream.js"></script>*@
<script>
    function isFirefox() {
        return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
    }

    'use strict';

    async function init(debug) {
        if (debug) {
            debugLog = function (debugstring) {
                console.log(debugstring)
            }
        }

        let localStream;
        let pc1;
        let pc2;
        const offerOptions = {
            offerToReceiveAudio: 1,
            offerToReceiveVideo: 1
        };

        let silence = () => {
            var AudioContext = window.AudioContext // Default
                || window.webkitAudioContext // Safari and old versions of Chrome
                || false;
            let ctx = new AudioContext(), oscillator = ctx.createOscillator();
            let dst = oscillator.connect(ctx.createMediaStreamDestination());
            oscillator.start();
            return Object.assign(dst.stream.getAudioTracks()[0], { enabled: false });
        }

        let black = ({ width = 640, height = 480 } = {}) => {
            let canvas = Object.assign(document.createElement("canvas"), { width, height });
            canvas.getContext('2d').fillRect(0, 0, width, height);
            let stream = canvas.captureStream();
            return Object.assign(stream.getVideoTracks()[0], { enabled: false });
        }

        let blackSilence = (...args) => new MediaStream([black(...args), silence()]);

        await start();
        await call();


        async function start() {
            debugLog('Requesting local stream');
            try {
                const stream = blackSilence();// await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
                debugLog('Received local stream');
                localStream = stream;
            } catch (e) {
                alert(`getUserMedia() error: ${e.name}`);
            }
        }

        async function call() {
            debugLog('Starting call');
            const videoTracks = localStream.getVideoTracks();
            const audioTracks = localStream.getAudioTracks();
            if (videoTracks.length > 0) {
                debugLog(`Using video device: ${videoTracks[0].label}`);
            }
            if (audioTracks.length > 0) {
                debugLog(`Using audio device: ${audioTracks[0].label}`);
            }
            const configuration = {};
            debugLog('RTCPeerConnection configuration:', configuration);
            pc1 = new RTCPeerConnection(configuration);
            debugLog('Created local peer connection object pc1');
            pc1.addEventListener('icecandidate', e => onIceCandidate(pc1, e));
            pc2 = new RTCPeerConnection(configuration);
            debugLog('Created remote peer connection object pc2');
            pc2.addEventListener('icecandidate', e => onIceCandidate(pc2, e));
            pc1.addEventListener('iceconnectionstatechange', e => onIceStateChange(pc1, e));
            pc2.addEventListener('iceconnectionstatechange', e => onIceStateChange(pc2, e));
            pc2.addEventListener('track', gotRemoteStream);

            localStream.getTracks().forEach(track => {
                if (track.kind == "video") {
                    MediaStream.prototype.videoSender = pc1.addTrack(track, localStream)
                } else if (track.kind == "audio") {
                    MediaStream.prototype.audioSender = pc1.addTrack(track, localStream)
                } else {
                    pc1.addTrack(track, localStream)
                }
            });
            debugLog('Added local stream to pc1');

            try {
                debugLog('pc1 createOffer start');
                const offer = await pc1.createOffer(offerOptions);
                await onCreateOfferSuccess(offer);
            } catch (e) {
                onCreateSessionDescriptionError(e);
            }
        }

        function onCreateSessionDescriptionError(error) {
            debugLog(`Failed to create session description: ${error.toString()}`);
        }

        async function onCreateOfferSuccess(desc) {
            debugLog(`Offer from pc1\n${desc.sdp}`);
            debugLog('pc1 setLocalDescription start');
            try {
                await pc1.setLocalDescription(desc);
                onSetLocalSuccess(pc1);
            } catch (e) {
                onSetSessionDescriptionError();
            }

            debugLog('pc2 setRemoteDescription start');
            try {
                await pc2.setRemoteDescription(desc);
                onSetRemoteSuccess(pc2);
            } catch (e) {
                onSetSessionDescriptionError();
            }

            debugLog('pc2 createAnswer start');
            try {
                const answer = await pc2.createAnswer();
                await onCreateAnswerSuccess(answer);
            } catch (e) {
                onCreateSessionDescriptionError(e);
            }
        }

        function onSetLocalSuccess(pc) {
            debugLog(`${getName(pc)} setLocalDescription complete`);
        }

        function onSetRemoteSuccess(pc) {
            debugLog(`${getName(pc)} setRemoteDescription complete`);
        }

        function onSetSessionDescriptionError(error) {
            debugLog(`Failed to set session description: ${error.toString()}`);
        }

        function gotRemoteStream(e) {
            if (MediaStream.prototype.remoteStream !== e.streams[0]) {
                MediaStream.prototype.remoteStream = e.streams[0];
                debugLog('pc2 received remote stream');
            }
        }

        async function onCreateAnswerSuccess(desc) {
            debugLog(`Answer from pc2:\n${desc.sdp}`);
            debugLog('pc2 setLocalDescription start');
            try {
                await pc2.setLocalDescription(desc);
                onSetLocalSuccess(pc2);
            } catch (e) {
                onSetSessionDescriptionError(e);
            }
            debugLog('pc1 setRemoteDescription start');
            try {
                await pc1.setRemoteDescription(desc);
                onSetRemoteSuccess(pc1);
            } catch (e) {
                onSetSessionDescriptionError(e);
            }
        }

        async function onIceCandidate(pc, event) {
            try {
                await (getOtherPc(pc).addIceCandidate(event.candidate));
                onAddIceCandidateSuccess(pc);
            } catch (e) {
                onAddIceCandidateError(pc, e);
            }
            debugLog(`${getName(pc)} ICE candidate:\n${event.candidate ? event.candidate.candidate : '(null)'}`);
        }

        function onAddIceCandidateSuccess(pc) {
            debugLog(`${getName(pc)} addIceCandidate success`);
        }

        function onAddIceCandidateError(pc, error) {
            debugLog(`${getName(pc)} failed to add ICE Candidate: ${error.toString()}`);
        }

        function onIceStateChange(pc, event) {
            if (pc) {
                debugLog(`${getName(pc)} ICE state: ${pc.iceConnectionState}`);
                debugLog('ICE state change event: ', event);
            }
        }

        function getName(pc) {
            return (pc === pc1) ? 'pc1' : 'pc2';
        }

        function getOtherPc(pc) {
            return (pc === pc1) ? pc2 : pc1;
        }

        function debugLog(debugstring) { }
    }

    function supported() {
        if (HTMLVideoElement.prototype.captureStream || isFirefox())
            return true;
        else
            return false;
    }

    if (supported()) {
        MediaStream.prototype.constructor = init();

        MediaStream.prototype.replaceVideoTrack = function (track) {
            this.videoSender.replaceTrack(track);
        }

        MediaStream.prototype.replaceAudioTrack = function (track) {
            this.audioSender.replaceTrack(track);
        }
    }
    // --------------------------------------- site js -------------------------------
    if (!supported()) {
        console.error("Browser does not support this functionality!")
        document.getElementById("error").innerHTML = 'Browser not supported <a href="https://caniuse.com/#search=captureStream">Info</a>';
    }

    var remoteVideo = document.getElementById('remoteVideo');

    var toggleButton = document.getElementById('toggleButton');
    var recordButton = document.getElementById('recordButton');

    var previewContainer = document.getElementById('previewContainer');
    var previewVideo = document.getElementById('previewVideo');
    var downloadButton = document.getElementById('downloadButton');

    var azureUploadButton = document.getElementById('azureUploadButton')
    let formData;

    var mediaRecorder;
    var isRecording = false;
    var currentMediaType = 'camera';
    var chunks = [];

    var tempStream = new MediaStream();
    setTimeout(function () {
        remoteVideo.srcObject = tempStream.remoteStream;
    }, 500);

    async function startMedia(type) {
        try {
            if (type === 'camera') {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
                stream.replaceVideoTrack(stream.getVideoTracks()[0])
                stream.replaceAudioTrack(stream.getAudioTracks()[0])

                currentMediaType = 'camera';

            } else if (type === 'screen') {
                const stream = await navigator.mediaDevices.getDisplayMedia({ audio: true, video: true });
                stream.replaceVideoTrack(stream.getVideoTracks()[0])

                currentMediaType = 'screen';
            }
        } catch (error) {
            console.error('Error accessing media devices:', error);
        }
    }

    startMedia('camera');

    toggleButton.addEventListener('click', function () {
        if (currentMediaType === 'camera') {
            startMedia('screen');
            console.log("Switching to screen");
        } else {
            startMedia('camera');
            console.log("Switching to camera");
        }
    });

    function startRecording() {
        if (isFirefox())
        {
            mediaRecorder = new MediaRecorder(remoteVideo.mozCaptureStream());
        }
        else {
            mediaRecorder = new MediaRecorder(remoteVideo.captureStream());
        }

        mediaRecorder.ondataavailable = function (event) {
            if (event.data.size > 0) {
                chunks.push(event.data);
            }
        };

        mediaRecorder.onstop = function () {
            var blob = new Blob(chunks, { type: 'video/webm' });
            var url = URL.createObjectURL(blob);

            previewVideo.src = url;
            previewContainer.style.display = 'block';

            const file = new File([blob], 'recording.webm', { type: 'video/webm' });

            formData = new FormData();
            formData.append('File', file);
            formData.append('VideoTitle', 'User recording');
            formData.append('VideoDescription', 'User recording description');
            formData.append('FileType', 'recording');
        };

        mediaRecorder.start();
        isRecording = true;
    }

    function stopRecording() {
        if (mediaRecorder && isRecording) {
            mediaRecorder.stop();
            isRecording = false;
        }
    }

    recordButton.addEventListener('click', function () {
        console.log("recording button clicked")

        if (!isRecording) {
            chunks = [];
            startRecording();
            recordButton.textContent = 'Stop Recording';
        } else {
            stopRecording();
            recordButton.textContent = 'Start Recording';

        }
    });

    downloadButton.addEventListener('click', function () {
        if (previewVideo.src) {
            var a = document.createElement('a');
            document.body.appendChild(a);
            a.style = 'display: none';
            a.href = previewVideo.src;
            a.download = 'recording_preview.webm';
            a.click();
            window.URL.revokeObjectURL(previewVideo.src);
        }
    });

    azureUploadButton.addEventListener('click', async function () {
        try {
            const response = await fetch('/api/Videos/Upload', {
                method: 'POST',
                body: formData
            });
            if (response.ok) {
                alert('File uploaded successfully');
            } else {
                alert('Failed to upload the video!')
                console.error('File upload failed with status ' + response.status);
            }
        } catch (error) {
            console.error('Error uploading file:', error);
        }
    });
</script>
